#!/bin/bash

export DISPLAY=:0

help() {
    echo "Usage: rclone-drive-sync [OPTION]..."
    echo "Syncs a local directory with a google drive directory using rclone."
    echo ""
    echo "  -h, --help                display this help and exit"
    echo "  -f, --force [push|pull]   force push or pull, always vebose, no logfile"
    echo "  -l, --logs                display the last logs"
    echo "  -v, --verbose             verbose output"
    echo "  -c, --clear               clear the logs, and lockfiles"
}

CONFIG_FILE="$HOME/.config/rclone-drive-sync/conf"

if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    LOCKFILE="$HOME/scripts/.locks/rclone-drive-sync.lock"
    LOCAL_DIR="$HOME/sync"
    REMOTE_DIR="gdrive:rclone"
    LOGFILE="$HOME/scripts/.logs/rclone-drive-sync"
    LAST_RUN_FAILED="$HOME/scripts/.logs/rclone-drive-sync-failed"
fi

log () {
    echo "$(date) - $*" >> "$LOGFILE"
}

log_error () {
    echo "$(date) - $*" >> "$LOGFILE"
    echo "$(date) - $*" >> "$LAST_RUN_FAILED"
    notify-send -u critical "$*"
}

log_info () {
    echo "$(date) - $*" >> "$LOGFILE"
    notify-send -u low "$*"
}

follow_logs() {
    tail -f "$LOGFILE" --pid=$$ &
}

last_logs() {
    if [ -f "$LAST_RUN_FAILED" ]; then
        echo "NOTE: Last run failed"
    fi
    cat "$LOGFILE"
}

rotate_logs() {
    if [ -f "$LOGFILE.7" ]; then
        rm "$LOGFILE.7"
    fi
    for i in {6..0}; do
        if [ -f "$LOGFILE.$i" ]; then
            mv "$LOGFILE.$i" "$LOGFILE.$((i+1))"
        fi
    done
    if [ -f "$LOGFILE" ]; then
        mv "$LOGFILE" "$LOGFILE.0"
    fi
}

clear_logs() {
    rotate_logs
    rm -f "$LAST_RUN_FAILED"
    rm -f "$LOCKFILE"
}

pre_sync_checks() {
    if [ -f "$LAST_RUN_FAILED" ]; then
        log_info "Last run failed, please check the logs, or clear with -c"
        exit 1
    fi
    if [ -f "$LOCKFILE" ]; then
        log_info "Already running, please check the logs, or clear with -c"
        exit 1
    fi
    if ! ping -c 1 drive.google.com &> /dev/null; then
        log_info "No network connection"
        exit 1
    fi
}

pre_sync() {
    pre_sync_checks
    touch "$LOCKFILE"
    rotate_logs
    log "Starting sync"
    if [ "$VERBOSE" = true ]; then
        follow_logs
    fi
}

post_sync() {
    rm -f "$LOCKFILE"
}

RCLONE_FLAGS="-Lv --fast-list --log-file=$LOGFILE --drive-chunk-size=64M"

normal_sync() {
    pre_sync

    /usr/bin/rclone copy "$REMOTE_DIR" "$LOCAL_DIR" -u $RCLONE_FLAGS
    if [[ $? -ne 0 ]]; then
        log_error "rclone cloud to local copy failed"
        exit 1
    fi

    /usr/bin/rclone sync "$LOCAL_DIR" "$REMOTE_DIR" --log-file="$LOGFILE" $RCLONE_FLAGS
    if [[ $? -ne 0 ]]; then
        log_error "rclone local to cloud sync failed"
        exit 1
    fi
    
    post_sync
}

forced_push() {
    pre_sync
    follow_logs

    log "Forced Push"
    /usr/bin/rclone sync "$LOCAL_DIR" "$REMOTE_DIR" $RCLONE_FLAGS

    post_sync
}

forced_pull() {
    pre_sync
    follow_logs

    log "Forced Pull"
    /usr/bin/rclone sync "$REMOTE_DIR" "$LOCAL_DIR" $RCLONE_FLAGS
    post_sync
}

opts=$(getopt -o hf:lvc --long help,force:,logs,verbose,clear -- "$@")
if [ $? -ne 0 ]; then
    help
    exit 1
fi
eval set -- "$opts"

while true; do
    case "$1" in
        -h | --help)
            help
            exit 0
            ;;
        -f | --force)
            case "$2" in
                push)
                    forced_push
                    exit 0
                    ;;
                pull)
                    forced_pull
                    exit 0
                    ;;
                *)
                    help
                    exit 1
                    ;;
            esac
            ;;
        -l | --logs)
            last_logs
            exit 0
            ;;
        -v | --verbose)
            VERBOSE=true
            ;;
        -c | --clear)
            clear_logs
            exit 0
            ;;
        --)
            normal_sync
            exit 0
            ;;
        *)
            help
            exit 1
            ;;
    esac
    shift
done
